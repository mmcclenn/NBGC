#
# NBGC Project
# 
# Class NBGC::Model - dynamic system model
# 
# Author: Michael McClennen
# Copyright (c) 2010 University of Wisconsin-Madison
# 
# Each instance of this class represents a dynamic system model.  The model
# expresses a system of differential equations by means of a set of variables
# and flows.  An approximate solution to this system of equations can then be
# generated by iteration over a series of time steps.  This is referred to as
# "running" the model, and is controlled by an object of classs NBGC::Simulator.


package Mad::Model;

use strict;
use warnings;
use Carp;
use Exporter qw( import );

our(@EXPORT_OK) = qw(PLAIN_VAR CONST_VAR ASSIGN_VAR DYN_VAR
		     SCALAR_VAR LIST_VAR SET_VAR
		     INIT_PHASE CALC_PHASE STEP_PHASE FINAL_PHASE);

our(%EXPORT_TAGS) = ( vartypes => [qw(PLAIN_VAR CONST_VAR ASSIGN_VAR DYN_VAR
				      SCALAR_VAR LIST_VAR SET_VAR)],
		      phases => [qw(INIT_PHASE CALC_PHASE STEP_PHASE FINAL_PHASE)]);

our ($INPUT_LINE);
our ($INPUT_NAME);

use constant {
    PLAIN_VAR => 1,
    CONST_VAR => 2,
    ASSIGN_VAR => 3,
    DYN_VAR => 4,
    
    SCALAR_VAR => 1,
    LIST_VAR => 2,
    SET_VAR => 3,
    
    INIT_PHASE => 1,
    CALC_PHASE => 2,
    STEP_PHASE => 3,
    FINAL_PHASE => 4,
    
    COND_IF => 1,
    COND_UNLESS => 2,
    COND_ELSIF => 3,
    COND_ELSE => 4,
    
    LOOP_WHILE => 1,
    LOOP_UNTIL => 2,
    LOOP_FOREACH => 3,
    LOOP_FOR => 4
};

our @INITIAL_UNITS = ( 'km', 'm', 'cm', 'mm', 'µm', 'nm', 
		       'kg', 'g', 'mg', 'µg', 
		       'yr', 'mo', 'wk', 'day', 'hr', 'min', 
		       's', 'ms', 'µs',
		       'V', 'A', 'W', 'C', 'F', 'H', 'Ω', 'S', 'Wb', 'T',
		       '℃', '℉', 'K',
		       'mol', 
		       'cd', 'lm', 'lx',
		       'Bq', 'Gy', 'Sv', 'kat',
		       'rad', 'sr',
		       'N', 'Pa', 'J');

our @UNIT_ALIASES = ( 'um' => 'µm',
		      'ug' => 'µg',
		      'mcg' => 'µg',
		      'us' => 'us',
		      'year' => 'yr',
		      'mon' => 'mo',
		      'week' => 'wk',
		      'sec' => 's',			# '',
		      'ohm' => 'Ω',
		      'degC' => '℃',
		      'degF' => '℉',
		      );

our @PRIME_NUMBER;

# Constructor, destructor and related methods
# ===========================================

# new ( )
# 
# Creates a new Model instance.

sub new {

    my $class = shift;
    
    # Create a new object and bless it into the proper class.
    
    my $self = {};
    bless $self, $class;
     
    $self->{symtabs} = { main => {} };
    $self->{current_symtab} = $self->{symtabs}{main};
    $self->{current_prefix} = '';
    
    $self->{symseq} = [];	# List of symbols in the order they were seen
    $self->{initlist} = [];	# List of initialization steps (hashes)
    $self->{flowlist} = [];     # List of flows (hashes)
    $self->{itable} = {};	# Table of initial values and symbol definitions
    $self->{stack} = [];	# Stack for parsing =ifdef and such
    
    $self->setup_units();
    
    return $self;
} 


# DESTROY ()
# 
# Empty destructor method

sub DESTROY {
}


# Methods for dealing with variables
# ----------------------------------

# see_package ( $name )
# 
# Called when the Mad keyword 'package' is found.

sub see_package {

    my ($self, $name) = @_;
    
    $self->{symtabs}{$name} = {} unless ref $self->{modules}{$name} eq 'HASH';
}


# see_var ( $name, $pkg, $type, $dim, $filename, $line )
# 
# If we have not already seen a variable with this name, add it to the model.
# The parameters 'filename' and 'line' tell us where the variable was
# encountered.

sub see_var {

    my ($self, $name, $pkg, $type, $dim, $filename, $line) = @_;
    
    my $stab = $self->{symtabs}{$pkg};
    
    # If this is the first time we have encountered this name, add a new entry
    # to the symbol table and return.
    
    unless ( ref $stab->{$name} eq 'HASH' ) {

	$stab->{$name} = { name => $name,
			   type => $type,
			   dim => $dim,
			   deffn => $filename,
			   defli => $line,
			 };
	
	return 1;
    }
    
    # If we are setting the value, note the filename and line number.
    
    if ( $type == ASSIGN_VAR ) {
	$stab->{$name}{variable} = 1;
	$stab->{$name}{deffn} = $filename;
	$stab->{$name}{defli} = $line;
    }
}


# has_constant ( $name, $pkg )
# 
# If a constant has already been declared with the given name in the given
# package, return true.

sub has_constant {
    
    my ($self, $name, $pkg) = @_;
    
    my $stab = $self->{symtabs}{$pkg};
    
    return 1 if $stab->{$name}{type} == CONST_VAR;
    return undef; # otherwise
}


# has_lvalue ( $name, $pkg )
# 
# If a variable has already been declared with the given name in the given
# package, and we know it is a variable because it has been set, return the
# filename and line number at which this happened.

sub has_lvalue {
    
    my ($self, $name, $pkg) = @_;
    
    my $stab = $self->{symtabs}{$pkg};
    
    return 1 if $stab->{$name}{variable};
    return undef; # otherwise
}


# where_used ( $name, $pkg )
# 
# Return the filename and line where this variable was last used.

sub where_used {

    my ($self, $name, $pkg) = @_;

    my $stab = $self->{symtabs}{$pkg};
    
    return ($stab->{$name}{deffn}, $stab->{$name}{defli});
}


# declare_unit ( $new, $old )
# 
# Process a new unit declaration.  $new is the new unit name.  If $old
# is defined, it specifies an existing unit to which the new one
# should be aliased.  Returns 1 on success, 0 on failure.

sub declare_unit {
    
    my ($self, $new, $old) = @_;
    
    $self->{err} = undef;
    
    # First check to see if the new unit has already been defined.
    
    if ( $self->{unit}{$new} ) {
	#$self->{err} = 'UNIT_DECL_REPEATED';
	#return 0;
	return $self->{unit}{$new};
    }
    
    # Then check to see if we are aliasing to an existing unit.
    
    if ( $old ) {
	if ( $self->{unit}{$old} ) {
	    $self->{unit}{$new} = $self->{unit}{$old};
	    $self->{unit}{"~$new"} = $self->{unit}{"~$old"};
	    return $self->{unit}{$old};
	}
	else {
	    $self->{err} = 'UNIT_NOT_FOUND';
	    return 0;
	}
    }
    
    # Otherwise, we are declaring an entirely new unit.  The unit and its
    # inverse get assigned a unique prime number, which will be used to
    # unit-balance each equation.
    
    else {
	my $i = $self->{unit_index}++;
	$self->{unit}{$new} = $PRIME_NUMBER[$i];
	$self->{unit}{"~$new"} = $PRIME_NUMBER[$i];
	return $self->{unit}{$new};
    }
}


# has_unit ( $unit )
# 
# If the given unit is defined in this model, return the prime number that has
# been assigned to it (true).  Otherwise, return 0 (false).

sub has_unit {

    my ($self, $unit) = @_;

    if ( defined $self->{unit}{$unit} ) {
	return $self->{unit}{$unit};
    }
    else {
	return 0;
    }
}


sub parse_init_stmt {

    my ($self, $stmt) = @_;
    my ($const, $name, $expr);
    
    if ( ($const, $name, $expr) = 
	 $stmt =~ / ^ (const\s+)? \$ (\w+) (?: \s* = \s* (.*))/xoi )
    {
	my $sym;
	
	# Check for the 'const' keyword, and register the
	# identifier $name as either a constant or a variable accordingly.
	
	if ( $const ) {
	    $sym = $self->symbol($2, 'const');
	}
	else {
	    $sym = $self->symbol($2);
	}
	
	# If an initialization expression was given, add it to the
	# initialization list for this simulation.
	
	if ( $expr ne '' ) {
	    $self->add_init({sym => $sym, expr => $3});
	}
    }
    
    else
    {
 	croak "Invalid init statement '$stmt' at $INPUT_NAME, line $INPUT_LINE\n";
    }
}


# Parse a "run" statement from the model.  Currently, the only valid run
# statements are flow specifiers.

sub parse_run_stmt {
    
    my ($self, $stmt) = @_;
    
    if ( $stmt =~ / ^ (\$?\w+) \s* => \s* (\$?\w+) \s* : 
		    \s* (\$?-?[\w.]+) \s* \* \s* (\$?-?[\w.]+) $ /xo )
    {
	$self->add_flow($self->fs($1), $self->fe($2), 
			$self->mult($self->node($3), $self->node($4)));
    }
    
    elsif ( $stmt =~ / ^ (\$?\w+) \s* => \s* (\$?\w+) \s* : \s* (\$?-?[\w.]+) $ /xo )
    {
	$self->add_flow($self->fs($1), $self->fe($2), $self->node($3));
    }
    
    elsif ( $stmt =~ / ^ (\$?\w+) \s* => \s* (\$?\w+) \s* : \s* (.+) /xo )
    {
	$self->add_flow($self->fs($1), $self->fe($2), $self->expr($3));
    }
    
    elsif ( $stmt =~ / ^ (\$?\w+) \s* \* \s* (\$?-?[\w.]+) \s* => \s* (\$?\w+) $ /xo )
    { 
	$self->add_flow($self->fs($1), $self->fe($3), 
			$self->mult($self->node($1), $self->node($2)));
    }
    
    elsif ( $stmt =~ / ^ (\$?\w+) \s* => \s* (\$?\w+) \s* \* \s* (\$?\w+) $ /xo )
    {
	$self->add_flow($self->fs($1), $self->fe($2), 
			$self->mult($self->node($2), $self->node($3)));
    }
    
    else
    {
	croak "Invalid run statement '$stmt' at $INPUT_NAME, line $INPUT_LINE\n";
    }
}


# Add an initialization record to the model.

sub add_init {
 
    my ($self, $init) = @_;
    
    push @{$self->{initlist}}, $init;
}


# Add a flow start (variable or flow literal) to the model.

sub fs { 
    
    my ($self, $arg) = @_;
    
    if ( $arg =~ /^(?:source|endless|growth)$/i ) {
	return { type => 'flowlit' };
    }
    
    elsif ( $arg =~ /^\$([a-zA-Z_]\w*)$/ ) {
	return $self->symbol($1, 'var');
    }
    
    else {
	croak "Invalid flow start '$arg' at $INPUT_NAME, line $INPUT_LINE";
    }
}


# Add a flow end (variable or flow literal) to the model.

sub fe { 
    
    my ($self, $arg) = @_;
    
    if ( $arg =~ /^(?:sink|endless|decay)$/i ) {
	return { type => 'flowlit' };
    }
    
    elsif ( $arg =~ /^\$([a-zA-Z_]\w*)$/ ) {
	return $self->symbol($1, 'var');
    }
    
    else {
	croak "Invalid flow end '$arg' at $INPUT_NAME, line $INPUT_LINE";
    }
}


# Add a primitive node (variable, constant or literal) to the model.

sub node { 
    
    my ($self, $arg) = @_;
    
    if ( $arg =~ /^\$([a-zA-Z_]\w*)$/ ) {
	return $self->symbol($1);
    }
    
    elsif ( $arg =~ /^\d+$|^\d*\.\d+$|^\d+\.\d*$/ ) {
	return { type => 'literal', value => $1 };
    }
    
    else {
	croak "Can't understand '$arg' at $INPUT_NAME, line $INPUT_LINE";
    }
}


# Add a multiplication node to the model.

sub mult { 
    
    my ($self, @factors) = @_;
    
    return { type => 'prod', child => \@factors };
}


# Add an addition node to the model.

sub sum {

    my ($self, @terms) = @_;
    
    return { type => 'sum', child => \@terms };
}


# Add an arbitrary expression to the model.

sub expr {
    
    my ($self, @terms) = @_;
    
    return { type => 'expr', child => \@terms };
}


# Add a flow record to the model.

sub add_flow {
    
    my ($self, $source, $sink, $rate) = @_;
    
    my $flow = {source => $source, sink => $sink, rate => $rate};
    push @{$self->{flowlist}}, $flow;
}


# Note that the given symbol has been mentioned in the model.  Depending on
# how it is mentioned, it may have type 'const' or 'variable'.  This routine
# will be called more than once for most symbols; it is an error to redefine
# one from 'const' to 'variable' or vice versa.  Returns a reference to the
# symbol record.

sub symbol {

    my ($self, $name, $type) = @_;
    
    # If we have not seen this symbol before, create a new symbol record and
    # add it to the symbol table and sequence list.
    
    unless ( exists $self->{stable}{$name} ) {
	my $sym = $self->{stable}{$name} = NBGC::Symbol->new($name, $type);
        push @{$self->{sseq}}, $sym;
	return $sym;
    }
    
    # Otherwise, check to make sure we are not trying to redefine a constant
    # as a variable or vice versa.
    
    else {
	my $sym = $self->{stable}{$name};
	
	if ( defined($type) && (defined $sym->{type}) && ($type ne $sym->{type}) ) {
	    croak "Invalid redeclaration of $sym->{type} $name to $type \
at $INPUT_NAME, line $INPUT_LINE.\n";
	}
    
	elsif ( defined $type ) {
	    $sym->{type} = $type;
	    $sym->{order} = ( $type eq 'var' ? 1 : 0 );
	}
	
	return $sym;
    }
}


# initial_value ( name, value )
#
# Specifies an initial value for the given identifier (variable or constant),
# overriding any value specified in the model. An undefined value means to
# revert to the value specified in the model. The results of this call are
# persistent across model runs.

sub initial_value {

    my ($self, $name, $value) = @_;
    
    # First look up the identifier, and make sure that it is defined.
    
    my $sym = $self->{stable}{$name};
    
    unless ($sym) {
	carp "Unknown variable '$name'";
    }
    
    # If the value is defined, add it to the initial value table.  Otherwise,
    # remove any definition that may already be there.
    
    if ( defined $value ) {
	$self->{itable}{$name} = $value;
	return 1;
    }
    else {
	delete $self->{itable}{$name} if exists $self->{itable}{$name};
	return 1;
    }
}


@PRIME_NUMBER = (3, 5, 7, 11, 13, 17, 19, 23, 29, 
     31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 
     73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 
    127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 
    179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 
    233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 
    283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 
    353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 
    419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 
    467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 
    547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 
    607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 
    661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 
    739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 
    811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 
    877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 
    947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 
   1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 
   1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 
   1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 
   1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 
   1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 
   1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 
   1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 
   1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 
   1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 
   1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 
   1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 
   1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 
   1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 
   1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 
   2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 
   2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 
   2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 
   2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 
   2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 
   2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 
   2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 
   2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 
   2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 
   2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 
   2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 
   2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 
   3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 
   3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 
   3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 
   3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 
   3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 
   3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 
   3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 
   3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 
   3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 
   3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 
   3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 
   3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 
   4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 
   4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 
   4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 
   4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 
   4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 
   4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 
   4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 
   4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 
   4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 
   4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 
   4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 
   4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 
   5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 
   5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 
   5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 
   5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 
   5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 
   5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 
   5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 
   5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 
   5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 
   5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 
   5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 
   5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 
   6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 
   6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 
   6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 
   6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 
   6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 
   6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 
   6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 
   6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 
   6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 
   6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 
   6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 
   7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 
   7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 
   7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 
   7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 
   7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 
   7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 
   7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 
   7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 
   7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 
   7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919 );

sub setup_units {
    
    my ($self) = @_;
    $self->{unit_index} = 0;
    
    foreach my $unit (@INITIAL_UNITS) {
	my $i = $self->{unit_index}++;
	$self->{unit}{$unit} = $PRIME_NUMBER[$i];
	$self->{unit}{"~$unit"} = $PRIME_NUMBER[$i];
    }
    
    while (@UNIT_ALIASES) {
	my $new = shift @UNIT_ALIASES;
	my $old = shift @UNIT_ALIASES;
	
	$self->{unit}{$new} = $self->{unit}{$old};
	$self->{unit}{"~$new"} = $self->{unit}{$old};
    }
}

1;


