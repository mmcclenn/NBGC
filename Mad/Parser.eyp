
%{
use Mad::Model qw(:vartypes :phases);
use Mad::ParserAux;

%}

%nonassoc PREC_LOW
%nonassoc FLOWLEFT FLOWRIGHT
%left OROP XOROP
%left ANDOP
%right NOTOP
%left ','
%right ASSIGNOP '='
%right '?' ':'
%nonassoc DOTDOT
%left OROR DORDOR
%left ANDAND
%nonassoc RELOP
%left ADDOP
%left MULOP '%'
# %left MATCHOP
%right NOT2 UMINUS
%right POWOP
%nonassoc INCOP # Perl grammar uses PREINC PREDEC POSTINC POSTDEC
%nonassoc ')'
%left '('
%left '[' '{'


%%

program	:	progstart progseq
			{ $_[0]->new_dnode('PROGRAM', $_[2]) }
	;

progseq :	/* null */
			{ $_[0]->new_node('PROGSEQ') }

	|	progseq tl_decl
			{ add_child($_[1], $_[2]) }
	
	|	progseq flow
			{ add_child($_[1], $_[2]) }
	
	|	progseq line
			{ add_child($_[1], $_[2]) }
	;

progstart:	/* null */
	;

tl_decl	:	var
			{ $_[1] }
	
	|	default
			{ $_[1] }
	
	|	package
			{ $_[1] }
	
	|	include
			{ $_[1] }
	
	|	use
			{ $_[1] }
	
	|	unit
			{ $_[1] }
	
	|	function
			{ $_[1] }
	
	|	across_tl
			{ $_[1] }
	
	|	flow
			{ $_[1] }
	;

vardecl	:	simplevar.v unitopt.u
			{ merge_units($v, $u) }
	
	|	simplevar.v dimspec.d unitopt.u
			{ merge_units(add_child($v, $d), $u) }
	;

package	:	PACKAGE WORD.w ';'
			{ $_[0]->set_package($w) }
	;

include	:	INCLUDE WORD.w ';'
			{ $_[0]->parse_input($w . ".mad") }
	
	|	INCLUDE STR.w ';'
			{ $_[0]->parse_input($w) }
	;

use	:	USE WORD.w ';'
			{ $_[0]->use_perl($w . ".pm") }
	;

unit	:	UNIT wordlist.w ';'
			{ declare_units($_[0], $w) }
	;

wordlist:	WORD.w
			{ $_[0]->new_node('LIST', $_[0]->new_anode('STRING', $w)) }

	|	wordlist.l ',' WORD.w
			{ add_child($l, $_[0]->new_anode('STRING', $w)) }
	;

function:	FUNCTION WORD.name funargs.f unitopt.u ';'
			{
			    $_[0]->declare_function($name, $f, 'MAD_FUNC');
			}
	
	|	FUNCTION WORD.name funargs.f unitopt.u '{'
			{
			    $_[0]->declare_function($name, $f, 'MAD_FUNC');
			    $_[0]->push_frame(tag => 'FUNCTION', name => $name,
					      args => $f, units => $u);
			}
		stmtseq.q '}'
 			{
			    print "AAA\n";
			    $_[0]->pop_frame('FUNCTION');
			    print "BBB\n";
			    merge_units($_[0]->new_anode('FUNCTION', $f, $q),
					$u);
			}

	|	PERL FUNCTION WORD.name funargs.f unitopt.u ';'
			{
			    $_[0]->declare_function($name, $f, 'PERL_FUNC');
			}
	
	|	PERL FUNCTION WORD.name funargs.f unitopt.u '{'
			{
			    $_[0]->declare_function($name, $f, 'PERL_FUNC');
			    $_[0]->push_frame(tag => 'PERLFUNC', name => $name,
					      args => $f, units => $u);
			}
		perlseq.q '}'
			{
			    $_[0]->pop_frame('PERLFUNC');
			    merge_units($_[0]->new_anode('PERLFUNC', $f, $q),
					$u);
			}
	;

funargs	:	/* null */
	|	'(' scalar <* ','> ')'
			{
			    $_[0]->new_node('LIST', undef, @{$_[2]->{children}});
			}
	;

unitopt	:	/* null */
	
	|	unitspec
			{ $_[1] }
	;

unitspec:	'<' unitlist.ulist '>'
			{ merge_units($_[0]->new_node('UNITSPEC'), $ulist, 1) }
	;

unitlist:	/* null */
			{ $_[0]->new_node('UNITLIST') }

	|	unitlist UNIT
			{
			    my (@u) = $_[0]->validate_unit($_[2]);
			    if ( $u[0] eq 'ERROR' ) {
				$_[0]->YYError();
			    }
			    else {
				add_units($_[1], @u);
			    }
			}
	;

across_tl :	ACROSS dimlist.dl '{'
			{
			    $_[0]->push_frame(tag => 'ACROSS', dimlist => $dl);
			}
		progseq.q '}'
			{
			    $_[0]->pop_frame('ACROSS');
			}
	;

stmtseq :	/* null */
			{ $_[0]->new_node('STMTSEQ') }
		
	|	stmtseq across
			{ add_child($_[1], $_[2]) }
	
	|	stmtseq line
			{ add_child($_[1], $_[2]) }
	;

block	:	'{' 
			{ 
			    $_[0]->push_frame(tag => 'BLOCK'); 
			}
		stmtseq '}'
			{
			    $_[0]->pop_frame('BLOCK');
			    $_[0]->new_dnode('BLOCK', $_[2]);
			}
	;

perlblock :	PERL '{'
			{
			    $_[0]->lex_mode('perl');
			    $_[0]->push_frame(tag => 'PERLBLOCK');
			}
		perlseq '}'
		        {
			    $_[0]->pop_frame('PERLBLOCK');
			}
			
	|	'%{' 
			{
			    $_[0]->lex_mode('pperl');
			    $_[0]->push_frame(tag => 'PERLBLOCK');
			} 
		perlseq '%}'
			{
			    $_[0]->pop_frame('PERLBLOCK');
			}
	;

phaseblock :	phase.p '{'
			{
			    $_[0]->push_frame(tag => 'BLOCK', phase => $p);
			}
		stmtseq.q '}'
			{
			    $_[0]->new_dnode($p, $q);
			    $_[0]->pop_frame('BLOCK');
			}
	;

phase	:	INIT
	
	|	CALC
	
	|	STEP
	
	|	FINAL
	;

line	:	block
			{ $_[1]; }

	|	perlblock
			{ $_[1]; }
	
	|	phaseblock
			{ $_[1]; }
	
	|	phase.p 
			{
			    $_[0]->push_frame(tag => 'line', phase => $p);
			}
		sideff.e ';'
			{
			    $_[0]->pop_frame('line');
			    $e;
			}
	
	|	cond
			{ $_[1]; }
	
	|	loop
			{ $_[1]; }
	
	|	sideff.e ';'
			{ $e; }
	
	|	VAR vardecl.v ';'
			{
			    $_[0]->see_var($v, PLAIN_VAR);
			}
	
	|	CONST vardecl.v '=' 
			{
			    $_[0]->see_var($v, CONST_VAR);
			    $_[0]->push_frame(tag => 'CONST', phase => INIT_PHASE);
			}
		      expr.e ';'
			{
			    $_[0]->pop_frame('CONST');
			    $_[0]->new_anode('ASSIGN', '=', $v, $e);
			}
	;

across	:	ACROSS dimlist.dl '{'
			{
			    $_[0]->push_frame(tag => 'ACROSS', dimlist => $dl);
			}
		stmtseq.q '}'
			{
			    $_[0]->pop_frame('ACROSS');
			}
	;

dimlist :	dimspec.d
			{ $_[0]->new_node('DIMLIST', $d); }
	 
	|	dimlist.l dimspec.d
			{ add_child($l, $d); }
	;

dimspec	:	'[' label.l array.d ']'
			{ add_child($d, $l); }
	
	|	'[' label.l set.d ']'
			{ add_child($d, $l); }
	;

label	:	/* null */
	|	WORD.w ':'
			{ $_[0]->new_anode('LABEL', $w); }
	;

sideff	:	expr
			{ $_[1] }

	|	expr.l IF expr.r
			{ $_[0]->new_node('AND', $r, $l) }

	|	expr.l UNLESS expr.r
			{ $_[0]->new_node('OR', $r, $l) }
	;

cond	:	condword.c '(' 
			{ $_[0]->push_frame(tag => $c); }
		expr.e ')' '{' stmtseq.q '}'
			{ 
			    $_[0]->pop_frame($c);
			    $_[0]->new_node($c, $e, $q);
			}
		else
	;

condword :	IF
			{ 'IF' }
	|	UNLESS
			{ 'UNLESS' }
	;

else	:	/* null */

	|	ELSE '{'
			{
			    $_[0]->push_frame(tag => 'ELSE');
			}
		stmtseq.q '}'
			{ 
			    $_[0]->pop_frame('ELSE');
			    $_[0]->new_node('ELSE', $q);
			}

	|	ELSIF '(' 
			{ $_[0]->push_frame(tag => 'ELSIF'); }
		expr.e ')' '{' stmtseq.q '}'
			{
			    $_[0]->pop_frame('ELSIF');
			    $_[0]->new_node('ELSIF', $e, $q);
			}
		else
	;

loop	:	loopword.c '(' 
			{
			    $_[0]->push_frame(tag => $c);
			}
		expr.e ')' '{' stmtseq.q '}'
			{
			    $_[0]->pop_frame($c);
			    $_[0]->new_node($c, $e, $q);
			}
	
	|	FOREACH
			{
			    $_[0]->push_frame(tag => 'FOREACH');
			}
		scalarvar.i '(' expr.e ')' '{' stmtseq.q '}'
			{
			    $_[0]->see_var($i, ASSIGN_VAR);
			    $_[0]->pop_frame('FOREACH');
			    $_[0]->new_node('FOREACH', $i, $e, $q);
			}
	
	|	FOR '('
			{
			    $_[0]->push_frame('FOR');
			}
		expr.e1 ';' expr.e2 ';' expr.e3 ')' '{' stmtseq.q '}'
			{
			    $_[0]->pop_frame('FOR');
			    $_[0]->new_node('FOR', $e1, $e2, $e3, $q);
			}
	;

listexpr:	/* null */ %prec PREC_LOW

	|	argexpr %prec PREC_LOW
			{ $_[1] }
	;

argexpr	:	argexpr ','
			{ $_[1] }

	|	argexpr ',' term.t
			{
			    if ( ref $_[1] eq 'LIST' ) {
				push @{$_[1]->{children}}, $t;
				$_[1];
			    }
			    else {
				$_[0]->new_node('LIST', $_[1], $t);
			    }
			}

	|	term %prec PREC_LOW
			{ $_[1] }
	;

expr	:	expr.l ANDOP expr.r
			{ $_[0]->new_node('AND', $l, $r) }

	|	expr.l OROP expr.r
			{ $_[0]->new_node('OR', $l, $r) }

	|	expr.l XOROP expr.r
			{ $_[0]->new_node('XOR', $l, $r) }

	|	NOTOP expr.e
			{ $_[0]->new_node('NOT', $e) }

	|	term %prec PREC_LOW
			{ $_[1] }
	;

term	:	termbinop
			{ $_[1] }
	
	|	termunop
			{ $_[1] }
	
	|	term.a '?' term.b ':' term.c
			{ $_[0]->new_node('TRI', $a, $b, $c) }
	
	|	'(' argexpr ')' 
			{ $_[2] }
	
	|	varexpr
			{ $_[1] }
	
	|	dynvar
			{ $_[1] }
	
	|	indexvar
			{ $_[1] }
	
	|	NUM
			{ $_[0]->new_anode('NUM', $_[1]) }
	
	|	STR
			{ $_[0]->new_anode('STR', $_[1]) }
	
	|	funcall
			{ $_[1] }
	
	|	objblock
			{ $_[1] }
	
        |	RETURN expr.e
			{ $_[0]->new_node('RETURN', $e) }
	
	|	term.t unitspec.u %prec '('
			{ merge_units($t, $u) }
	
	|	YADAYADA
			{ $_[0]->new_node('YADAYADA'); }
	;

termbinop:	term.l ASSIGNOP.op term.r
			{
			    $_[0]->see_var($l, ASSIGN_VAR);
			    $_[0]->new_anode('ASSIGN', $op, $l, $r);
			}
	
	|	term.l '=' term.r
			{
			    $_[0]->see_var($l, ASSIGN_VAR);
			    $_[0]->new_anode('ASSIGN', '=', $l, $r);
			}
	
	|	term.l ADDOP.op term.r
			{ $_[0]->new_anode('ADDOP', $op, $l, $r); }
	
	|	term.l MULOP.op term.r
			{ $_[0]->new_anode('MULOP', $op, $l, $r); }
	
	|	term.l '%' term.r
			{ $_[0]->new_anode('MULOP', '%', $l, $r); }
	
        |	term.l POWOP.op term.r
			{ $_[0]->new_anode('POWOP', $op, $l, $r); }
	
	|	term.l RELOP.op term.r
			{ $_[0]->new_anode('RELOP', $op, $l, $r); }
	
	|	term.l DOTDOT term.r
			{ $_[0]->new_node('DOTDOT', $l, $r); }
	
	|	term.l ANDAND term.r
			{ $_[0]->new_node('AND', $l, $r); }
	
	|	term.l OROR term.r
			{ $_[0]->new_node('OR', $l, $r); }
	
	|	term.l DORDOR term.r
			{ $_[0]->new_node('DOR', $l, $r); }
	
#	|	term MATCHOP term
	;

termunop:	ADDOP.op term.t %prec UMINUS
			{ $op eq '-' ? $_[0]->new_node('UMINUS', $t) : $t }
    
	|       NOT2 term.t %prec UMINUS
			{ $_[0]->new_node('NOT', $t) }

	|	term INCOP
			{ $_[1]->{incr} = 'POST'; $_[1] }

	|	INCOP term
			{ $_[2]->{incr} = 'PRE'; $_[2] }
	;

varexpr	:	simplevar.v
			{
			    $_[0]->see_var($v, PLAIN_VAR);
			}
	
	|	simplevar.v subexpr.d
			{
			    add_child($v, $d);
			    $_[0]->see_var($v, PLAIN_VAR);
			}
	
	|	varexpr.v DOT WORD.f
			{
			    $_[0]->see_var($v, PLAIN_VAR);
			    $_[0]->new_node('FIELD', $v, $f);
			}
	
	|	varexpr.v DOT FUNC.m '(' listexpr.args ')'
			{ 
			    $_[0]->see_var($v, PLAIN_VAR);
			    $_[0]->new_node('METHOD', $v, $m, $args);
			}
	;

dynvar :	MY simplevar.v
			{
			    $_[0]->see_var($v, DYN_VAR);
			}
	;

simplevar :	scalar
			{ $_[1] }

	|	array
			{ $_[1] }
	
	|	set
			{ $_[1] }
	;

scalarvar:	scalar.v
			{ $_[0]->see_var($v, PLAIN_VAR); }
	
	|	MY scalar.v
			{ $_[0]->see_var($v, DYN_VAR); }
	;

scalar	:	'$' WORD
			{ $_[0]->new_anode('SCALAR', $_[2]); }
	;

array	:	'@' WORD
			{ $_[0]->new_anode('ARRAY', $_[2]); }
	;

set	:	'%' WORD
			{ $_[0]->new_anode('SET', $_[2]); }
	;

indexvar:	'$^'
			{ $_[0]->new_node('INDEXVAR'); } 
	
	|	'$^' NUM.n
			{ $_[0]->new_anode('INDEXVAR', $n); }
	
	|	'$^' WORD.w
			{ $_[0]->new_anode('INDEXVAR', $w); }
	;

subexpr :	subspec.d
			{ $_[0]->new_node('SUBSCRIPT', $d); }
	 
	|	subexpr.l subspec.d
			{ add_child($l, $d); }
	;

subspec	:	'[' ']'
			{ $_[0]->new_node('EMPTYDIM') }
	
	|	'[' expr ']'
			{ $_[2] }
	;

funcall	:	FUNC.fun '(' listexpr.args ')'
			{ $_[0]->new_node('FUNCALL', $fun, @{$args->{children}}) }

        |	FUNC.fun '(' listexpr.args ')' DOT WORD.fld
			{ $_[0]->new_node('DOTFLD', $fld,
				   $_[0]->new_node('FUNCALL', $fun, @{$args->{children}}) ) }
	;

objblock:	WORD.n pairblock.p
			{ $_[0]->new_anode('NEWOBJ', $n, $p) }
	;

pairblock:	'{' pairlist '}'
			{ $_[0]->new_dnode('PAIRBLOCK', $_[2]) }
	
	|	'{' pairlist ',' '}'
			{ $_[0]->new_dnode('PAIRBLOCK', $_[2]) }
	;

pairlist:	/* null */
	
	|	pair.p
			{ $_[0]->new_node('LIST', $p) }

	|	pairlist.l ',' pair.p
			{ $_[0]->add_child($l, $p) }
	;

pair	:	WORD.left ':' expr.right
			{ $_[0]->new_node('PAIR', $left, $right) }
	;

flow	:      	scalar.so MULOP.op expr.coeff FLOWRIGHT scalar.sn
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, 
			                    $_[0]->new_anode('MULOP', $op, $so, $coeff));
			}

	|	scalar.sn MULOP.op expr.coeff FLOWLEFT scalar.so
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, 
					    $_[0]->new_anode('MULOP', $op, $sn, $coeff));
			}

	|	scalar.so FLOWRIGHT scalar.sn MULOP.op expr.coeff
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn,
					    $_[0]->new_anode('MULOP', $op, $sn, $coeff));
			}

	|	scalar.sn FLOWLEFT scalar.so MULOP.op expr.coeff
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, 
					    $_[0]->new_anode('MULOP', $op, $so, $coeff));
			}

	|	scalar.so '(' expr.rate ')' FLOWRIGHT scalar.sn
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, $rate);
			}

	|	scalar.sn '(' expr.rate ')' FLOWLEFT scalar.so
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, $rate);
			}

	|	scalar.so FLOWRIGHT scalar.sn '(' expr.rate ')'
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, $rate);
			}

	|	scalar.sn FLOWLEFT scalar.so '(' expr.rate ')'
			{
			    $_[0]->see_var($so, ASSIGN_VAR);
			    $_[0]->see_var($sn, ASSIGN_VAR);
			    $_[0]->new_node('FLOW', $so, $sn, $rate);
			}
	;

%%

use Carp;
#use Text::Balanced qw/:ALL/;

# Auxiliary routines
# ==================

# init ( )
# 
# This function modifies the EYapp Parser object by adding the extra fields we
# will need.

sub init {

    my ($self) = @_;
    
}

# new_model ( )
# 
# Create a new, empty model, associate it with this parser object, and return
# a reference to it.  This model will be populated using the code parsed by
# this parser.

sub new_model {

    my ($self) = @_;
    
    # Initialize the parser to parse a new model.
    
    $self->{my_stack} = [];
    $self->{lex_mode} = 'mad';
    $self->{frame} = [{tag => 'PROGRAM', phase => CALC_PHASE, module => '', dimcount => 0}];
    $self->{cf} = $self->{frame}[0];
    
    # Create a new object to hold the model as it is read in.  Return a
    # reference to this object as the function result.
    
    $self->{model} = Mad::Model->new();
    $self->{model}{parser} = $self;
    return $self->{model};
}

# parse_input ( $filename )
# 
# If $filename is given, parse the contents of that file using the grammar
# specified above.  Unless, of course, the file cannot be read, in which case
# the program will terminate.  If $filename is empty, read from standard input
# and parse that.

sub parse_input {

    my ($self, $filename) = @_;
    my $input;
    
    # First check that we have called new_model() previously.
    
    croak "You must first call the new_model() method" unless ref $self->{model};
    
    # If a filename was specified...
    
    if ( $filename ne '' ) {
	
	# identify the directory path of the current filename (if any) so that
	# we can look up the next filename in the same directory.
	
	my ($base) = ($self->{my_filename} =~ m{(.*/)});  
	$filename = "$base/$filename" if $base ne '';
	
	# Read the entire file as if it were a single line, by locally
	# undefining $/ ($INPUT_RECORD_SEPARATOR).
	
	local $/;
	
	# Open the file, or die trying.  Read the contents into $input.
	
 	open my $ifh, "<", $filename or die "Error reading file \"$filename\": $!";
	$input = <$ifh>;
    }
    
    # If no filename was specified...
    
    else {
	
	# Use the dummy filename "<>" in case we have to emit any error messages.
	
	$filename = "<>";
	
	# Read the entire input as if it were a single line, by locally
	# undefining $/ ($INPUT_RECORD_SEPARATOR).
	
	local $/;
	
	# Read from standard input into the variable $input.
	
	$input = <STDIN>;
    }
    
    # If we actually got some input, process it.
    
    if ( $input =~ /\S/ ) {
	
	# If we are in the middle of handling another file, record that
	# information on the input stack.
	
	if ( $self->{my_filename} ne '' ) {
	    unshift @{$self->{my_input_stack}}, {file => $self->{my_filename}, 
						 line => $self->{my_line}, 
						 input => $self->{my_input}};
	}
	
	# Now remember the name of the file we are reading from, the starting
	# line number (1) and the contents that were read in.  Also start out
	# in the default package.
	
	$self->{my_filename} = $filename;
	$self->{my_line} = 1;
	$self->{my_input} = \$input;
	
	# Now parse the input, and return the resulting tree (if any).
	
	my $tree = $self->YYParse( yylex => \&my_lex_wrapper, yyerror => \&my_syntax, yybuildingtree => 1,
				   yydebug => 0x05);
	return $tree;
    }
}

# pop_input ( )
# 
# This function is called by the lexer when it gets to the end of its input.
# The input stack is popped.  The function will then return true if there
# is anything remaining on the stack (i.e. a file which we need to pick up
# parsing again after the pause for an included file) and false otherwise.

sub pop_input {

    my $self = shift;
    
    # If the input stack is empty, return false.  We have finished processing
    # the file we started with, and there is nothing left to do.
    
    if ( @{$self->{my_input_stack}} == 0 ) {
	return 0;
    }

    # Otherwise, we have finished processing a file that was included from
    # another one, and should resume the other file where we left off.
    
    else {
	$self->{my_filename} = $self->{my_input_stack}[0]{file};
	$self->{my_line} = $self->{my_input_stack}[0]{line};
	$self->{my_input} = $self->{my_input_stack}[0]{input};
	shift @{$self->{my_input_stack}};
	return 1;
    }
}

# Functions that help the lexical analyzer
# ----------------------------------------

# lex_mode ( $mode )
# 
# Put the lexical analyzer into the given mode.  This will tell it what to
# expect next.  Options include:
# 
# mad		Expect regular Mad code
# perl		Expect Perl code
# pperl		Expect Perl code which will be terminated by %}
# units		Expect a unit specification, i.e. "<mi/hr>"

sub lex_mode {
    my ($self, $mode) = @_;
    
    # Set our "lex_mode" field, and then initialize the brace count to 1 in
    # case we need to count braces to determine when the current mode ends.
    
    $self->{lex_mode} = $mode;
    $self->{brcount} = 1;
}

# validate_unit ( $raw )
# 
# Validate the unit specification contained in $raw.  If its syntax is
# incorrect, return 'ERROR'.  Otherwise, figure out the unit's power and
# return a list containing the unit that many times.  For example, <m^2> means
# "meters squared" and would result in the list ("m", "m").  Units that would
# appear in the denominator are prefixed with "~".  For example, <s^-2> means
# "per second per second" and would result in the list ("~s", "~s").

sub validate_unit {
    my ($self, $raw) = @_;
    my ($invert, $unit, $count);
    
    if ( $raw =~ m{^([/*]?)\s*([a-zA-Z]+)\^?([0-9]*)$} ) {
	$unit = $1 eq '/' ? "~$2" : $2;
	$count = $3 ne '' ? $3+0 : 1;
	return ($unit) x $count;
    }
    elsif ( $raw =~ m{^\*?\s*([a-zA-Z]+)\^?-([0-9]+)$} ) {
	$unit = "~$1";
	$count = $2 ne '' ? $2+0 : 1;
	return ($unit) x $count;
    }
    else {
	return 'ERROR';
    }
}

# count_brace ( $adjustment )
# 
# Adjust the brace count up or down (depending on whether $adjustment is
# greater than or less than zero).  If the brace count becomes zero, the
# lexical mode returns to 'mad' and we return the token '{'.  Otherwise,
# whichever token is currently being parsed is part of perl code and so we
# return the token 'PERLPART'.

sub count_brace {
    my ($self, $adjustment) = @_;
    $self->{brcount} += $adjustment;
    if ( $self->{brcount} == 0 && $adjustment < 0 ) {
	$self->{lex_mode} = 'mad';
	return '}';
    }
    else {
	return 'PERLPART';
    }
}

# my_error ( $msg )
# 
# Terminate parsing because of an error.

sub my_syntax {
    my ($self, $msg, $filename, $line) = @_;
    
    $filename = $self->{my_filename} unless defined $filename;
    $line = $self->{my_line} unless defined $line;
    
    if ( $msg ne '' ) {
        die "Syntax error at $filename line $line: $msg\n";
    }
    else {
        die "Syntax error at $filename line $line.\n";
    }
}

sub my_error {
    my ($self, $msg, $filename, $line) = @_;
    
    $filename = $self->{my_filename} unless defined $filename;
    $line = $self->{my_line} unless defined $line;
    
    die "Error at $self->{my_filename} line $self->{my_line}: $msg\n";
}

sub my_warning {
    my ($self, $msg, $filename, $line) = @_;
    
    $filename = $self->{my_filename} unless defined $filename;
    $line = $self->{my_line} unless defined $line;
    
    warn "Warning at $self->{my_filename} line $self->{my_line}: $msg\n";
}

# The lexical analyzer
# --------------------

# This function is called repeatedly by the parser.  Its job is to determine
# the next token in the input stream and return a pair ($token, $value).  It
# should return ('', undef) when it runs out of input, which signals the
# parser that we are done.

sub my_lexer {
    my $self = shift;
    my $m;
    
    # Allow retries when we process comments, or when we get to the end of a
    # file and need to pop the input file stack (i.e. because we were
    # processing an included file).
    
    while ( 1 )
    {
	# The 'for' is used below to set $_ rather than as a loop.
	
	for (${$self->{my_input}}) {
	    
	    # Start by skipping whitespace.  Note that we have to keep count
	    # of the number of newlines we pass, so that error messages will
	    # indicate the proper line number.
	    
	    m{\G(\s+)}gc and $self->{my_line} += ($1 =~ tr{\n}{});
	    
	    # If we find a comment, skip the rest of the line.  There might
	    # not be a following newline if the comment is the last thing in
	    # the file.
	    
	    m{\G#.*\n?}gc and $self->{my_line}++, next;
	    
	    # Now, if we are done with the current input, see if there's
	    # anything waiting on the input file stack (i.e. because we were
	    # processing an included file).  If not, return the signal for
	    # "end of input".
	    
	    if ( defined(pos($_)) and pos($_) >= length($_) ) {
		next if $self->pop_input();
		return ('', undef); # otherwise
	    }
	    	    
	    # Check for %{, which always signals the start of a Perl block
	    
	    if ( m[\G%{]gc ) {
		$self->lex_mode('pperl');
		return ('%{', '');
	    }

	    # If we are expecting Perl code, then we use a very simplified
	    # lexer that counts brackets to figure out when the enclosing
	    # block is done.  There are two modes: 'perl' which expects
	    # regular brackets, and 'pperl' which expects '%}'.  NEEDED:
	    # PROPER HANDLING OF COMMENTS AND QUOTES, ALSO SOURCE FILTER.
	    
	    if ( $self->{lex_mode} eq 'pperl' ) {
		m<\G\%\}>gc		and $self->{lex_mode} = 'mad', return ('%}','');
		m<\G(.*?)(?=%})>gcs	and $self->{my_line} += ($1 =~ tr{\n}{}),
		    return ('PERLPART', $1);
		croak "Syntax error in $self->{my_filename} line $self->{my_line}: %{ block not closed.\n";
	    }

	    elsif ( $self->{lex_mode} eq 'perl' ) {
		m<\G{>gc		and return ($self->count_brace(1), '{');
		m<\G}>gc		and return ($self->count_brace(-1), '}');
		m<([^{}]+)>gc and $self->{my_line} += ($1 =~ tr{\n}{}), 
		    return ('PERLPART', $1);
		croak "Syntax error in $self->{my_filename} line $self->{my_line}: Perl block not closed.\n";
	    }
	    
	    # If we find something that could be the start of a unit
	    # specification, then we switch to 'units' mode.
	    
	    if ( m{\G<(?=[\sa-zA-Z0-9/*^-]*>)}gc ) {
		$self->{lex_mode} = 'units';
		return ('<', '');
	    }
	    
	    if ( $self->{lex_mode} eq 'units' ) {
		my $t;
		m{\G>}gc		and $self->{lex_mode} = 'mad', return ('>', '');
		m{\G\s*([/*]?\s*[a-zA-Z]+\^?-?[0-9]*)}gc	and return ('UNIT', $1);
		return ('ERROR', '');
	    }
	    
	    # Otherwise, we're parsing our modeling language.  Start by looking for
	    # keywords.
	    
	    m{\Gacross(?!\w)}gc		and return ('ACROSS', '');
	    m{\Gand(?!\w)}gc		and return ('ANDOP', '');
	    m{\Gcalc(?!\w)}gc		and return ('CALC', '');
	    m{\Gconst(?!\w)}gc		and return ('CONST', '');
	    m{\Gelse(?!\w)}gc		and return ('ELSE', '');
	    m{\Gelsif(?!\w)}gc		and return ('ELSIF', '');
	    m{\Gexternal(?!\w)}gc	and return ('EXTERNAL', '');
	    m{\Gfinal(?!\w)}gc		and return ('FINAL', '');
	    m{\Gfor(?!\w)}gc		and return ('FOR', '');
	    m{\Gfunction(?!\w)}gc	and return ('FUNCTION', '');
	    m{\Ginclude(?!\w)}gc	and return ('INCLUDE', '');
	    m{\Gif(?!\w)}gc		and return ('IF', '');
	    m{\Ginit(?!\w)}gc		and return ('INIT', '');
	    m{\Glast(?!\w)}gc		and return ('LAST', '');
	    m{\Gnext(?!\w)}gc		and return ('NEXT', '');
	    m{\Gnot(?!\w)}gc		and return ('NOTOP', '');
	    m{\Gor(?!\w)}gc		and return ('OROP', '');
	    m{\Gover(?!\w)}gc		and return ('OVER', '');
	    m{\Gpackage(?!\w)}gc	and return ('PACKAGE', '');
	    m{\Gperl(?!\w)}gc		and return ('PERL', '');
	    m{\Gresult(?!\w)}gc		and return ('RESULT', '');
	    m{\Greturn(?!\w)}gc		and return ('RETURN', '');
	    m{\Grun(?!\w)}gc		and return ('RUN', '');
	    m{\Gstep(?!\w)}gc		and return ('STEP', '');
	    m{\Gunit(?!\w)}gc		and return ('UNIT', '');
	    m{\Gunless(?!\w)}gc		and return ('UNLESS', '');
	    m{\Guntil(?!\w)}gc		and return ('UNTIL', '');
	    m{\Guse(?!\w)}gc		and return ('USE', '');
	    m{\Gvar(?!\w)}gc		and return ('VAR', '');
	    m{\Gwhile(?!\w)}gc		and return ('WHILE', '');
	    m{\Gxor(?!\w)}gc		and return ('XOROP', '');
	    
	    # Otherwise, any alphanumeric sequence is a function
	    # (i.e. sin, push, etc.) if followed by a parenthesis, and a
	    # bareword otherwise.
	    
	    m{\G(\w(?<!\d)\w*(?=\())}gc		and return ('FUNC', $1);
	    m{\G(\w(?<!\d)\w*)}gc		and return ('WORD', $1);
	    
	    # Now check for numeric and string literals
	    # NEEDED: INTERPOLATION, MULTILINE
	    
	    m{\G((?:\d+\.\d*|\d*\.\d+|\d+)(?:[eE]-?\d+)?)}gc and return ('NUM', $1);
	    
	    m{\G'((?:[^\\']|\\.)*)'}gc		and return ('STR', $1);
	    m{\G"((?:[^\\"]|\\.)*)"}gc		and return ('STR', $1);
	    	    
	    # Now, all of the punctuation
	    
	    m{\G==>}gc				and return ('FLOWRIGHT', '');
	    m{\G<==}gc				and return ('FLOWLEFT', '');
	    m{\G\.\.\.}gc			and return ('YADAYADA', '');
	    m{\G\.\.}gc				and return ('DOTDOT', '');
	    m{\G\.}gc				and return ('DOT', '');
	    m{\G=>}gc				and return ('=>', '');
	    m{\G,}gc				and return (',', ',');
	    m{\G\|\|}gc				and return ('OROR', '');
	    m{\G\/\/}gc				and return ('DORDOR', '');
	    m{\G&&}gc				and return ('ANDAND', '');
	    m{\G(=~|!~)}gc			and return ('MATCHOP', $1);
	    m{\G(==|!=|<=>|eq|ne|cmp)}gc	and return ('RELOP', $1);
	    m{\G(<=|>=|lt|gt|le|ge)}gc		and return ('RELOP', $1);
	    m{\G(<|>)}gc			and return ('RELOP', $1);
	    m{\G([-+\*\/\^|%]=|\*\*=|&&=|\|\|=)}gc and return ('ASSIGNOP', $1);
	    m{\G(\+\+|--)}gc			and return ('INCOP', $1);
	    m{\G->}gc				and return ('ARROW', '');
	    m{\G\*\*}gc				and return ('POWOP', '');
	    m{\G([\*\/])}gc			and return ('MULOP', $1);
	    m{\G([+-])}gc			and return ('ADDOP', $1);
	    m{\G\\}gc				and return ('REFGEN', $1);
	    m{\G!}gc				and return ('NOT2', $1);
	    
	    # Miscellaneous characters
	    
	    m{\G\$\^}gc				and return ('$^', '');
	    m{\G([:;=~()\[\]\{\}\$\@\%])}gc	and return ($1, $1);
	    
	    # If we get here and the current line is not empty, then we've got
	    # an unrecognized character.
	    
	    if ( m{\G(\S)}gc ) {
		$self->my_syntax("unrecognized character '$1'");
	    }
	    else {
		die "Strange lexer error at $self->{my_filename} line $self->{my_line}.\n";
	    }
	}
    }
    
    return ('', undef);
}

# my_lex_wrapper ( ) 
# 
# This function is used for debugging only.  It serves as a wrapper around
# my_lexer, printing out each token and value as they are found.

sub my_lex_wrapper {
    my $parser = shift;
    my ($token, $value);
    ($token, $value) = &my_lexer($parser);
    if (ref $value)
    {
	print "FOUND ($parser->{my_line}) $token '$value->{attr}'\n";
    }
    else
    {
	print "FOUND ($parser->{my_line}) $token '$value'\n";
    }
    return ($token, $value);
}
